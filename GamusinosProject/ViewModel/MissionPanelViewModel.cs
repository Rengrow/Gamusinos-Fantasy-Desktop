using GalaSoft.MvvmLight.Command;
using GamusinosProject.Model;
using MvvmDialogs.ViewModels;
using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel;
using System.Linq;
using System.Runtime.CompilerServices;
using System.Text;
using System.Threading.Tasks;
using System.Windows.Input;

namespace GamusinosProject.ViewModel
{
    class MissionPanelViewModel : IUserDialogViewModel, INotifyPropertyChanged
    {
        GamusinosFantasyEntities ctx = new GamusinosFantasyEntities();

        #region autoGenerated

        public virtual bool IsModal { get { return true; } }
        public event EventHandler DialogClosing;

        #endregion

        #region CloseMethod
        public void RequestClose()
        {
            this.DialogClosing(this, null);
        }
        public ICommand CloseCommand
        {
            get { return new RelayCommand(RequestClose); }
        }
        #endregion

        #region VIEW

        #region Atributes
        private List<String> _locations;
        private String _selectedlocation;
        private List<Mission> _misions;
        private Mission _selectedMission;
        private List<Mission> _acceptedMissions;
        private List<Reward> _rewards;
        
        public List<Reward> Rewards {
            get
            {
                return _rewards;
            }
            set
            {
                _rewards = value;
                NotifyPropertyChanged();
            }
        }
        public List<Mission> AcceptedMissions
        {
            get
            {
                return _acceptedMissions;
            }
            set
            {
                _acceptedMissions = value;
                NotifyPropertyChanged();
            }
        }
        public List<String> Locations
        {
            get
            {
                return _locations;
            }
            set
            {
                _locations = value;
                NotifyPropertyChanged();
            }
        }
        public String Selectedlocation
        {
            get
            {
                return _selectedlocation;
            }
            set
            {
                _selectedlocation = value;
                FillMissions();
                NotifyPropertyChanged();
            }
        }
        public List<Mission> Missions
        {
            get
            {
                return _misions;
            }
            set
            {
                _misions = value;
                NotifyPropertyChanged();
            }
        }
        public Mission SelectedMission
        {
            get
            {
                return _selectedMission;
            }
            set
            {
                _selectedMission = value;
                if (value != null)
                {
                   Rewards = value.Rewards.ToList();                  
                }
                NotifyPropertyChanged();
            }
        }
        #endregion

        #region constructor
        public MissionPanelViewModel() {
            FillLocations();
            FillAcceptedMissions();
        }
        #endregion

        #region commands

        public void DeclineMission() {
            User currentPlayer = ctx.Users.Where(x => x.id == Tools.CurrentUser.id).SingleOrDefault();
            currentPlayer.Player.Missions.Remove(SelectedMission);
            ctx.SaveChanges();
            FillMissions();
            FillAcceptedMissions();          
        }

        public ICommand RemoveCommand
        {
            get { return new RelayCommand(DeclineMission); }
        }

        public void AcceptMission() {
            User currentPlayer = ctx.Users.Where(x => x.id == Tools.CurrentUser.id).SingleOrDefault();
            currentPlayer.Player.Missions.Add(SelectedMission);
            ctx.SaveChanges();
            FillMissions();
            FillAcceptedMissions();
        }

        public ICommand AcceptCommand
        {
            get { return new RelayCommand(AcceptMission); }
        }
        #endregion

        #region fill

        public void FillLocations() {
            Locations = ctx.Missions.Select(x => x.location).Distinct().ToList();
        }

        public void FillAcceptedMissions() {
            User currentPlayer = ctx.Users.Where(x => x.id == Tools.CurrentUser.id).SingleOrDefault();

            AcceptedMissions = currentPlayer.Player.Missions.ToList();
        }
        public void FillMissions()
        {
            User currentPlayer = ctx.Users.Where(x => x.id == Tools.CurrentUser.id).SingleOrDefault();
            List<Mission> AllMissions = ctx.Missions.Where(x => x.location.Equals(Selectedlocation)).ToList();
            List<Mission> MissionsAccepted = currentPlayer.Player.Missions.ToList();

            Missions = AllMissions.Except(MissionsAccepted).ToList();
        }
        #endregion

        #endregion

        #region dataChange
        public event PropertyChangedEventHandler PropertyChanged;
        public void NotifyPropertyChanged([CallerMemberName] String propertyName = "")
        {
            if (PropertyChanged != null)
            {
                PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }
        #endregion
    }
}
