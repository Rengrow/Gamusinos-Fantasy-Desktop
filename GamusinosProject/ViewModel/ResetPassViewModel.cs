using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using System.Windows.Input;
using GalaSoft.MvvmLight.Command;
using MvvmDialogs.ViewModels;
using System.Collections.ObjectModel;
using System.Runtime.CompilerServices;
using System.ComponentModel;
using GamusinosProject.Model;

namespace GamusinosProject.ViewModel
{
    class ResetPassViewModel : IUserDialogViewModel, INotifyPropertyChanged
    {
        public event PropertyChangedEventHandler PropertyChanged;
        GamusinosFantasyEntities ctx = new GamusinosFantasyEntities();

        #region Dialogs

        #region Vars
        private ObservableCollection<IDialogViewModel> _Dialog =
            new ObservableCollection<IDialogViewModel>();
        public ObservableCollection<IDialogViewModel> Dialogs { get { return _Dialog; } }
        #endregion

        #region Methods AutoGenerated
        public virtual bool IsModal { get { return true; } }
        public event EventHandler DialogClosing;
        #endregion

        #region Close Methods
        public void RequestClose()
        {
            this.DialogClosing(this, null);
        }

        public ICommand CloseCommand
        {
            get { return new RelayCommand(RequestClose); }
        }
        #endregion

        #endregion

        public ResetPassViewModel()
        {
            EqualsPasswordAndConfirmation = "Hidden";
        }

        #region View

        #region Private Attributes
        private String _rescueCode;
        private String _newPassword;
        private String _confirmationPassword;
        private String _equalsPasswordAndConfirmation;
        #endregion

        #region Public Attributes
        public String RescueCode
        {
            get
            {
                return _rescueCode;
            }
            set
            {
                _rescueCode = value;
            }
        }
        public String ConfirmationPassword
        {
            get
            {
                return _confirmationPassword;
            }
            set
            {
                _confirmationPassword = value;
            }
        }
        public String NewPassword
        {
            get
            {
                return _newPassword;
            }
            set
            {
                _newPassword = value;
            }
        }
        public String EqualsPasswordAndConfirmation
        {
            get
            {
                return _equalsPasswordAndConfirmation;
            }
            set
            {
                _equalsPasswordAndConfirmation = value;
                NotifyPropertyChanged();
            }
        }
        #endregion

        #region Methods
        private void NotifyPropertyChanged([CallerMemberName] String propertyName = "")
        {
            if (PropertyChanged != null)
            {
                PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }

        private void ResetPassword()
        {
            User user = ctx.Users.Where(u => u.recoverCode.Equals(RescueCode)).FirstOrDefault();

            String recover = CreateAccountViewModel.GenerateRecuperationCode(10);
            if (NewPassword.Equals(ConfirmationPassword))
            {
                if (user != null)
                {
                    user.password = Tools.SecurePasswordHasher.Hash(NewPassword);
                    user.recoverCode = recover;
                    ctx.SaveChanges();
                }
                this.Dialogs.Add(new RecoverCodeViewModel
                {
                    RecoverCode = recover
                });

                RequestClose();
            }
            else
            {
                EqualsPasswordAndConfirmation = "Visible";
            }
        }

        public ICommand ResetPasswordCommand
        {
            get { return new RelayCommand(ResetPassword); }
        }

        #endregion

        #endregion

    }
}
